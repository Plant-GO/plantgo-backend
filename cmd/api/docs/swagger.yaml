basePath: /
definitions:
  dto.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/infrastructure.User'
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.GuestLoginRequest:
    properties:
      android_id:
        type: string
      username:
        type: string
    required:
    - android_id
    - username
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  infrastructure.User:
    properties:
      android_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      google_id:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: sushilawasthi2999@gmail.com
    name: Sushil Awasthi
  description: Backend API for the PlantGo system
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://wtfisterms.com/terms/
  title: PlantGo API
  version: "1.0"
paths:
  /:
    get:
      description: Basic test route
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Hello World
      tags:
      - Utility
  /auth/google/callback:
    get:
      description: Processes the OAuth2 callback from Google and returns a JWT token
      parameters:
      - description: Authorization code from Google
        in: query
        name: code
        required: true
        type: string
      - description: State token
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Handle Google OAuth callback
      tags:
      - Auth
  /auth/google/login:
    get:
      description: Redirects the user to Google's OAuth2 authorization page
      produces:
      - text/plain
      responses:
        "307":
          description: Redirects to Google OAuth2 page
          schema:
            type: string
      summary: Initiate Google OAuth login
      tags:
      - Auth
  /auth/guest/login:
    post:
      consumes:
      - application/json
      description: Authenticates or creates a guest user using Android ID and username
      parameters:
      - description: Guest login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GuestLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Guest login
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user with username, email, and password
      parameters:
      - description: infrastructure.User registration info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /health:
    get:
      description: Returns database and service health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health Check
      tags:
      - System
  /profile:
    get:
      description: Returns the authenticated user's profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infrastructure.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - Auth
swagger: "2.0"
